import requests
from threading import Lock
from time import time, sleep

API_BASE_URL = "https://www.bling.com.br/Api/v3"

token_cache = {} # loja: (token: str, expiry: float)

"""
loja="lojaodositio" is not indented to be change,
this functnality will be extended for othel stores, but for now
only for the lojaodositio, so this is for future versions
"""

# Throttle get function
lock = Lock()
o_get = requests.get
def get(*args, **kwargs):
    with lock:
        sleep(1)
        return o_get(*args, **kwargs)

def fetch_access_token(loja="lojaodositio"):
    """
    Try to fetch and return access token for lajaodositio, with cache
    with token expiry 5 hours
    """
    if loja in token_cache:
        token, expiry = token_cache[loja]
        if time() < expiry:
            return token

    url = f"http://85.209.93.197:8080/code_bling/{loja}"
    headers = {
        'Authorization': 'Bearer 0123456789',
        'Content-Type': 'application/json'
    }
    try:
        response = requests.request("GET", url, headers=headers, data={})
        access_token = response.json().get("access_token")
        if access_token:
            token_cache[loja] = (access_token, time() + 5 * 60 * 60)
            return access_token
        else:
            print("Failed to fetch access token.")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error fetching access token: {e}")
        return None

def get_headers(loja="lojaodositio") -> dict:
    """
    Return headers for lojaodasito with access token
    """

    token = fetch_access_token()
    if not token:
        print("token now available in headers")

    headers = {
        'Accept': 'application/json',
        'Authorization': f"Bearer {token}"
    }

    return headers
