import os
import requests
from requests import get
from pymongo import MongoClient
from datetime import datetime, timedelta
from dotenv import load_dotenv
import sys
import logging
from time import sleep
import pandas as pd

from bling_sources import *

def get_recent_receivables():
    """
    Retrieves receivables from MongoDB where dataEmissao_x is within the last 5 days.
    Also splits numeroDocumento into CR.PedidoNº and CR.PedOrd fields.
    
    Returns:
        list: List of receivable documents that match the criteria
    """
    try:
        # Connect to MongoDB
        client = MongoClient(os.getenv("MONGO_URI"))
        db = client[os.getenv("MONGO_DATABASE")]
        collection = db[os.getenv("MONGO_COLLECTION_RECEIVABLE")]
        
        # Calculate the date 5 days ago
        five_days_ago = datetime.now() - timedelta(days=5)
        
        # Query for documents where dataEmissao_x is within the last 5 days
        query = {
            "dataEmissao_x": {
                "$gte": five_days_ago.strftime("%Y-%m-%d")
            }
        }
        
        # Execute the query
        results = list(collection.find(query))
        
        # Process each document to split numeroDocumento
        total_docs = len(results)
        split_success = 0
        split_failed = 0
        
        for doc in results:
            if 'numeroDocumento' in doc and doc['numeroDocumento']:
                try:
                    parts = doc['numeroDocumento'].split('/')
                    doc['CR.PedidoNº'] = parts[0] if len(parts) > 0 else ''
                    doc['CR.PedOrd'] = parts[1] if len(parts) > 1 else ''
                    # Update the document in the database
                    collection.update_one(
                        {'_id': doc['_id']},
                        {'$set': {
                            'CR.PedidoNº': doc['CR.PedidoNº'],
                            'CR.PedOrd': doc['CR.PedOrd']
                        }}
                    )
                    split_success += 1
                except Exception:
                    split_failed += 1
            else:
                split_failed += 1
        
        logging.info(
            f"Retrieved {total_docs} receivables: "
            f"{split_success} numeroDocumento successfully split, "
            f"{split_failed} failed or missing numeroDocumento"
        )
        return results
        
    except Exception as e:
        logging.error(f"Error retrieving recent receivables: {str(e)}")
        return []
    finally:
        if 'client' in locals():
            client.close()

if __name__ == "__main__":
    # Load environment variables
    load_dotenv()
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # Test the get_recent_receivables function
    try:
        recent_receivables = get_recent_receivables()
        print(f"Found {len(recent_receivables)} recent receivables")
        for receivable in recent_receivables:
            print(f"Document number: {receivable.get('numeroDocumento', 'N/A')}")
    except Exception as e:
        print(f"Error testing get_recent_receivables: {e}")

